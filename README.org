#+OPTIONS: toc:2 
* What is it?
  This software is simple Sencha Ext JS component generator.
  It Follows Sencha Ext JS MVC pattern.
  It was built for *my own purposes*.

* Installation
  Just run *make* and extgen command will be added to .bashrc

* Documentation
** Examples
   SYNOPSIS
   #+BEGIN_SRC
      extgen <Type> <Definition> <Options>
   #+END_SRC

   Create Combo
   #+BEGIN_SRC
      extgen combo Combo.definiton.GoesHere -s -m
   #+END_SRC

   Create Grid
   #+BEGIN_SRC
      extgen grid Grid.definition.GoesHere -s -m -fn-3
   #+END_SRC
   it will create grid with store, model and 3 fields

   Create Store
   #+BEGIN_SRC
      extgen store Store.definition.GoesHere -m
   #+END_SRC

   Create Model
   #+BEGIN_SRC
      extgen model Model.definition.GoesHere
   #+END_SRC

   Create Panel
   #+BEGIN_SRC
      extgen panel Panel.definition.GoesHere -layout=hbox -as
   #+END_SRC
   it will create panel with layout type hbox and align stretch

   Create Form
   #+BEGIN_SRC
      extgen panel Form.definition.GoesHere -layout=vbox -as -fn=3
   #+END_SRC
   It will create panel with layout type vbox and align stretch. Form will have 3 items

   Create Controller
   #+BEGIN_SRC
      extgen controller Controller.definition.GoesHere
   #+END_SRC
** Types and options
*** General Options
    - /-o/ outputs generated code
*** Colon notation
    Generate attributes/objects from input.At the moment implementation is little bit messy, but it works.Curently work on combo,form,grid,panel
    #+BEGIN_SRC
        extgen form Definiton.goes.Here border:false fieldDefaults.labelAlign:'left' fieldDefaults.labelWidth:100
    #+END_SRC
    will generate
    #+BEGIN_SRC javascript
       Ext.define('MyProject.view.Definiton.goes.Here', {
           title: '',
           extend: 'Ext.form.Panel',
           alias: 'widget.DefinitonGoesHere',
           bodyPadding: 10,
           border: false,
       "border":false,"fieldDefaults":{"labelAlign":"left","labelWidth":100},
           layout : {
       
           }
           items: [],
       })

    #+END_SRC
*** Grid
    - /-fn=<Number>/ number of fields generated for grid
    - /-s/ create and bind *Store* to grid
    - /-m/ create and bind *Model* to store
    - /-c/ generate constrcutor code for element (see constructor code below)
*** Combo
    - /-s/ create and bind *Store* to grid
    - /-m/ create and bind *Model* to store
    - /-c/ generate constrcutor code for element (see constructor code below)
*** Store
    - /-m/ create and bind *Model* to store
    - /-pas/ add paramsAsJson to store.proxy
    - /-url=<String>/ sets proxy.url
*** Model
    Currently has no options.
*** Panel
    - /-fn=<Number>/ number of fields generated for form
    - /layout=<String>/ generate layout type to elements layout attribute
    - /-as/ generate *align: stretch* to elements layout attribute
*** Form
    - /layout=<String>/ generate layout type to elements layout attribute
    - /-as/ generate *align: stretch* to elements layout attribute
*** Controller
    Currently has no options
*** Codes
**** Constructor
#+BEGIN_SRC javascript
constructor: function (cfg) {
      cfg = cfg || {}
      var me = this
      me.items = []
      me.callParent(arguments)
}
#+END_SRC

* Configuration
  1. Put config (*extgen_config.yml*) file to your project root.
  2. Set *project_name* in config file your project name.
  3. Set *path_to_ext_app* in config to your Ext JS app directory.

* License
  Please see the file called LICENSE.

* Reporting Bugs
  Report Bugs to repository Issues
