#+OPTIONS: toc:2 
* What is it?
  This software is simple Sencha Ext JS component generator.
  It Follows Sencha Ext JS MVC pattern.
  It was built for *my own purposes*.
  
* Documentation
** CLI
   SYNOPSIS
   #+BEGIN_SRC
        extgen <Template> <Definition> <Options>
   #+END_SRC
** Templates and options
*** General Options
    - /-o/ output generated code
*** Grid
    - /-fn=<Number>/ number of fields generated for grid (coming soon)
    - /-s/ create and bind *Store* to grid
    - /-m/ create and bind *Model* to store
    - /-c/ generate constrcutor code
**** Example
     Create grid with store, model and 3 fields
     #+BEGIN_SRC
        extgen grid Grid.definition.GoesHere -s -m -fn-3
     #+END_SRC
*** Combo
    - /-s/ create and bind *Store* to grid
    - /-m/ create and bind *Model* to store
    - /-c/ generate constrcutor code
**** Example
     Create Combobox with store and model
     #+BEGIN_SRC
        extgen combo Combo.definiton.GoesHere -s -m
     #+END_SRC
*** Store
    - /-m/ create and bind *Model* to store
    - /-paj/ add paramsAsJson to store.proxy
    - /-url=<String>/ sets proxy.url
**** Example
     Create Store with model
     #+BEGIN_SRC
        extgen store Store.definition.GoesHere -m
     #+END_SRC
*** Model
    Currently has no options
**** Example
     Create Model
     #+BEGIN_SRC
        extgen model Model.definition.GoesHere
     #+END_SRC
*** Panel | Form
    - /-layout=<String>/ set layout type
    - /-c/ generate constrcutor code
**** Example
     Create Panel
     #+BEGIN_SRC
        extgen panel Panel.definition.GoesHere -layout=hbox
     #+END_SRC
*** Controller
    Currently has no options
**** Example
     Create Controller
     #+BEGIN_SRC
        extgen controller Controller.definition.GoesHere
     #+END_SRC

* Installation
  Move to extgen directory and type
  #+BEGIN_SRC
       echo alias extgen=\"ruby $(pwd)/main.rb\" >> ~/.bashrc
  #+END_SRC

* Configuration
  1. Put config (*extgen_config.yml*) file to your project root.
  2. Set *project_name* in config file your project name.
  3. Set *path_to_ext_app* in config to your Ext JS app directory.

* Templates
  This software uses ERB Templates.
** Create New Template
   - <Template> - capitalized template path without .erb
   - <Type> - model, view, controller or something else

   1. Add template ERB file to templates directory
   2. Add <Template>: <Type> to templates/tpl_types.yml
** Using Options In Template
   In template /option? <String>/ checks if <String> is present.
   @eq_options[:option] returns value from command line argument -option=<Value>.
** Scripts
   Script class contains methods that should be called from template.
   Call Script class with Generator instance.
   Example:
   #+BEGIN_SRC
        Script.new(self).some_method()
   #+END_SRC
   
* License
  Please see the file called LICENSE.

* Reporting Bugs
  Report Bugs to repository Issues
